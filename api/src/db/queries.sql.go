// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
insert into accounts (active, created_at, email, display_name, picture)
values ($1, now(), $2, $3, $4)
returning id, active, created_at, email, display_name, picture
`

type CreateAccountParams struct {
	Active      bool
	Email       string
	DisplayName string
	Picture     string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Active,
		arg.Email,
		arg.DisplayName,
		arg.Picture,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.CreatedAt,
		&i.Email,
		&i.DisplayName,
		&i.Picture,
	)
	return i, err
}

const createRole = `-- name: CreateRole :exec
insert into roles (id)
values ($1)
on conflict do nothing
`

func (q *Queries) CreateRole(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, createRole, id)
	return err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
select id, active, created_at, email, display_name, picture from accounts where email = $1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.CreatedAt,
		&i.Email,
		&i.DisplayName,
		&i.Picture,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
select id, active, created_at, email, display_name, picture from accounts where id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.CreatedAt,
		&i.Email,
		&i.DisplayName,
		&i.Picture,
	)
	return i, err
}

const grantRole = `-- name: GrantRole :exec
insert into role_bindings (role_id, account_id)
values ($1, $2)
on conflict do nothing
`

type GrantRoleParams struct {
	RoleID    string
	AccountID uuid.UUID
}

func (q *Queries) GrantRole(ctx context.Context, arg GrantRoleParams) error {
	_, err := q.db.Exec(ctx, grantRole, arg.RoleID, arg.AccountID)
	return err
}

const listAccounts = `-- name: ListAccounts :many
select id, active, created_at, email, display_name, picture from accounts 
where (active = $1 or $1 is null)
order by email
`

func (q *Queries) ListAccounts(ctx context.Context, active pgtype.Bool) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, active)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Active,
			&i.CreatedAt,
			&i.Email,
			&i.DisplayName,
			&i.Picture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGrants = `-- name: ListGrants :many
select role_id from role_bindings 
where 
    account_id = $1
    and (role_id = any($2::varchar[]) or coalesce(cardinality($2), 0) = 0)
order by role_id
`

type ListGrantsParams struct {
	AccountID uuid.UUID
	RoleIds   []string
}

func (q *Queries) ListGrants(ctx context.Context, arg ListGrantsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, listGrants, arg.AccountID, arg.RoleIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var role_id string
		if err := rows.Scan(&role_id); err != nil {
			return nil, err
		}
		items = append(items, role_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
select id from roles order by id
`

func (q *Queries) ListRoles(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRole = `-- name: RevokeRole :exec
delete from role_bindings
where role_id = $1 and account_id = $2
`

type RevokeRoleParams struct {
	RoleID    string
	AccountID uuid.UUID
}

func (q *Queries) RevokeRole(ctx context.Context, arg RevokeRoleParams) error {
	_, err := q.db.Exec(ctx, revokeRole, arg.RoleID, arg.AccountID)
	return err
}

const updateAccountActivation = `-- name: UpdateAccountActivation :exec
update accounts set active = $1 where id = any($2::uuid[])
`

type UpdateAccountActivationParams struct {
	Active bool
	Ids    []uuid.UUID
}

func (q *Queries) UpdateAccountActivation(ctx context.Context, arg UpdateAccountActivationParams) error {
	_, err := q.db.Exec(ctx, updateAccountActivation, arg.Active, arg.Ids)
	return err
}
