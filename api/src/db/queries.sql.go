// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
insert into accounts (created_at, email, display_name, picture)
values (now(), $1, $2, $3)
returning id, active, created_at, email, display_name, picture
`

type CreateAccountParams struct {
	Email       string
	DisplayName string
	Picture     string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Email, arg.DisplayName, arg.Picture)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.CreatedAt,
		&i.Email,
		&i.DisplayName,
		&i.Picture,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
select id, active, created_at, email, display_name, picture from accounts where email = $1
`

func (q *Queries) GetAccount(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.CreatedAt,
		&i.Email,
		&i.DisplayName,
		&i.Picture,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
select id, active, created_at, email, display_name, picture from accounts 
where (active = $1 or $1 is null)
order by id
`

func (q *Queries) ListAccounts(ctx context.Context, active pgtype.Bool) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, active)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Active,
			&i.CreatedAt,
			&i.Email,
			&i.DisplayName,
			&i.Picture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
