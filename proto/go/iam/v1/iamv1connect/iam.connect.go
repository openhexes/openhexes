// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: iam/v1/iam.proto

package iamv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhexes/proto/iam/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IAMServiceName is the fully-qualified name of the IAMService service.
	IAMServiceName = "iam.v1.IAMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IAMServiceResolveAccountProcedure is the fully-qualified name of the IAMService's ResolveAccount
	// RPC.
	IAMServiceResolveAccountProcedure = "/iam.v1.IAMService/ResolveAccount"
	// IAMServiceListAccountsProcedure is the fully-qualified name of the IAMService's ListAccounts RPC.
	IAMServiceListAccountsProcedure = "/iam.v1.IAMService/ListAccounts"
	// IAMServiceGetAccountProcedure is the fully-qualified name of the IAMService's GetAccount RPC.
	IAMServiceGetAccountProcedure = "/iam.v1.IAMService/GetAccount"
	// IAMServiceUpdateAccountActivationProcedure is the fully-qualified name of the IAMService's
	// UpdateAccountActivation RPC.
	IAMServiceUpdateAccountActivationProcedure = "/iam.v1.IAMService/UpdateAccountActivation"
)

// IAMServiceClient is a client for the iam.v1.IAMService service.
type IAMServiceClient interface {
	ResolveAccount(context.Context, *connect.Request[v1.ResolveAccountRequest]) (*connect.Response[v1.ResolveAccountResponse], error)
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.ServerStreamForClient[v1.ListAccountsResponse], error)
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	UpdateAccountActivation(context.Context, *connect.Request[v1.UpdateAccountActivationRequest]) (*connect.Response[v1.UpdateAccountActivationResponse], error)
}

// NewIAMServiceClient constructs a client for the iam.v1.IAMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIAMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IAMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	iAMServiceMethods := v1.File_iam_v1_iam_proto.Services().ByName("IAMService").Methods()
	return &iAMServiceClient{
		resolveAccount: connect.NewClient[v1.ResolveAccountRequest, v1.ResolveAccountResponse](
			httpClient,
			baseURL+IAMServiceResolveAccountProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ResolveAccount")),
			connect.WithClientOptions(opts...),
		),
		listAccounts: connect.NewClient[v1.ListAccountsRequest, v1.ListAccountsResponse](
			httpClient,
			baseURL+IAMServiceListAccountsProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListAccounts")),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+IAMServiceGetAccountProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		updateAccountActivation: connect.NewClient[v1.UpdateAccountActivationRequest, v1.UpdateAccountActivationResponse](
			httpClient,
			baseURL+IAMServiceUpdateAccountActivationProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("UpdateAccountActivation")),
			connect.WithClientOptions(opts...),
		),
	}
}

// iAMServiceClient implements IAMServiceClient.
type iAMServiceClient struct {
	resolveAccount          *connect.Client[v1.ResolveAccountRequest, v1.ResolveAccountResponse]
	listAccounts            *connect.Client[v1.ListAccountsRequest, v1.ListAccountsResponse]
	getAccount              *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	updateAccountActivation *connect.Client[v1.UpdateAccountActivationRequest, v1.UpdateAccountActivationResponse]
}

// ResolveAccount calls iam.v1.IAMService.ResolveAccount.
func (c *iAMServiceClient) ResolveAccount(ctx context.Context, req *connect.Request[v1.ResolveAccountRequest]) (*connect.Response[v1.ResolveAccountResponse], error) {
	return c.resolveAccount.CallUnary(ctx, req)
}

// ListAccounts calls iam.v1.IAMService.ListAccounts.
func (c *iAMServiceClient) ListAccounts(ctx context.Context, req *connect.Request[v1.ListAccountsRequest]) (*connect.ServerStreamForClient[v1.ListAccountsResponse], error) {
	return c.listAccounts.CallServerStream(ctx, req)
}

// GetAccount calls iam.v1.IAMService.GetAccount.
func (c *iAMServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// UpdateAccountActivation calls iam.v1.IAMService.UpdateAccountActivation.
func (c *iAMServiceClient) UpdateAccountActivation(ctx context.Context, req *connect.Request[v1.UpdateAccountActivationRequest]) (*connect.Response[v1.UpdateAccountActivationResponse], error) {
	return c.updateAccountActivation.CallUnary(ctx, req)
}

// IAMServiceHandler is an implementation of the iam.v1.IAMService service.
type IAMServiceHandler interface {
	ResolveAccount(context.Context, *connect.Request[v1.ResolveAccountRequest]) (*connect.Response[v1.ResolveAccountResponse], error)
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest], *connect.ServerStream[v1.ListAccountsResponse]) error
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	UpdateAccountActivation(context.Context, *connect.Request[v1.UpdateAccountActivationRequest]) (*connect.Response[v1.UpdateAccountActivationResponse], error)
}

// NewIAMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIAMServiceHandler(svc IAMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iAMServiceMethods := v1.File_iam_v1_iam_proto.Services().ByName("IAMService").Methods()
	iAMServiceResolveAccountHandler := connect.NewUnaryHandler(
		IAMServiceResolveAccountProcedure,
		svc.ResolveAccount,
		connect.WithSchema(iAMServiceMethods.ByName("ResolveAccount")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListAccountsHandler := connect.NewServerStreamHandler(
		IAMServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(iAMServiceMethods.ByName("ListAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetAccountHandler := connect.NewUnaryHandler(
		IAMServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(iAMServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceUpdateAccountActivationHandler := connect.NewUnaryHandler(
		IAMServiceUpdateAccountActivationProcedure,
		svc.UpdateAccountActivation,
		connect.WithSchema(iAMServiceMethods.ByName("UpdateAccountActivation")),
		connect.WithHandlerOptions(opts...),
	)
	return "/iam.v1.IAMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IAMServiceResolveAccountProcedure:
			iAMServiceResolveAccountHandler.ServeHTTP(w, r)
		case IAMServiceListAccountsProcedure:
			iAMServiceListAccountsHandler.ServeHTTP(w, r)
		case IAMServiceGetAccountProcedure:
			iAMServiceGetAccountHandler.ServeHTTP(w, r)
		case IAMServiceUpdateAccountActivationProcedure:
			iAMServiceUpdateAccountActivationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIAMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIAMServiceHandler struct{}

func (UnimplementedIAMServiceHandler) ResolveAccount(context.Context, *connect.Request[v1.ResolveAccountRequest]) (*connect.Response[v1.ResolveAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("iam.v1.IAMService.ResolveAccount is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest], *connect.ServerStream[v1.ListAccountsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("iam.v1.IAMService.ListAccounts is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("iam.v1.IAMService.GetAccount is not implemented"))
}

func (UnimplementedIAMServiceHandler) UpdateAccountActivation(context.Context, *connect.Request[v1.UpdateAccountActivationRequest]) (*connect.Response[v1.UpdateAccountActivationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("iam.v1.IAMService.UpdateAccountActivation is not implemented"))
}
